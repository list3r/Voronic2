############################################# \
######## USER CONFIG OVERRIDES FILE #########  + --> This will help you personalize my config to your printer :)
############################################# /

# This file is yours! Feel free to edit it in order to include all the needed
# things to adapt my generic config to your machine. This file will not be erased
# when updating the config using moonraker and it will be kept as you've set it.
# You can change every section of the config. You can also add some new custom macros, etc...
# The corresponding documentation can be found in: docs > overrides.md

### Also, keep in mind: if you use a multi-MCU config such as the old school double SKRs or a CANbus toolhead
### board, you will need to specify which components are connected to which board in your own mcu.cfg file!
### Example: if something is connected to the toolhead MCU, you should use "config_pin: toolhead:PIN_NAME".

#> Main control MCUs are called "mcu" (and "secondary" when using a double MCU configuration)
#> Toolhead CANboard MCUs are called "toolhead"
#> MMU/ERCF MCUs are called "mmu" 

# ------------------------------------------------------------------------------------------


#-------------------------#
#   START_PRINT SEQUENCE  #
#-------------------------#

## The START_PRINT sequence is modular and fully customizable. A default START_PRINT sequence is auto-populated based on
## your probe choice (TAP, Dockable, Inductive), but if for some reasons you still want to modify it, please uncomment the following 3
## lines to define a new `variable_startprint_actions`. You can use any number of action or even duplicate some actions if needed.
## Available actions: "bed_soak", "extruder_preheating", "chamber_soak", "extruder_heating", "tilt_calib", "z_offset", "bedmesh", "purge", "clean", "primeline"
##
# [gcode_macro _USER_VARIABLES]
# variable_startprint_actions: "action1", "action2", ...
# gcode: # do not remove this line


#-------------------------#
#   EXTRUDER/BED PIDs     #
#-------------------------#

## Here is an example of some overrides for the PIDs. I put them here as almost everyone will use them,
## so just uncomment the following lines and change the values according to your own machine
# [extruder]
# control: pid
# pid_kp: 26.015
# pid_ki: 1.770
# pid_kd: 95.603
#— Rapido UHF Extruder with PT1000 RTD —#
[extruder]
sensor_type: PT1000
sensor_pin: E_TEMPERATURE    # Nighthawk alias for the PT1000 input
pullup_resistor: 2200        # onboard pull-up on the toolhead board
control: pid
pid_kp: 23.023
pid_ki: 1.668
pid_kd: 79.431
max_extrude_only_distance: 350.0
pressure_advance: 0.5

#— LDO Bed Heater (100 K β=3950) —#
[heater_bed]
heater_pin: BED_HEATER
sensor_type: Generic 3950
sensor_pin: BED_TEMPERATURE
pullup_resistor: 4700
max_power: 0.8
min_temp: 0
max_temp: 110

control: pid
pid_kp: 50.855
pid_ki: 2.568
pid_kd: 251.733
#-------------------------#
#   Z MOTORS DIRECTION    #
#-------------------------#
## Here is an example of some overrides for the motor directions as it's a pretty common one. If you need
## to invert the Z1 or Z3 motor direction on your machine, just uncomment the following lines.
[stepper_z1]
dir_pin: !Z1_DIR
[stepper_z3]
dir_pin: !Z3_DIR
#-------------------------#
#   Probe Offsets         #
#-------------------------#

## Here is an example of some overrides for bed probes. These frequently have calibrated offsets for xyz,
## and many will need them during setup. If you need to set these, just uncomment the following lines.
# [probe]
# x_offset: -1.85
# y_offset: 29.3
# z_offset: 12.6
#[stepper_z]
#endstop_pin: probe:z_virtual_endstop # uses cartographer as virtual endstop
#homing_retract_dist: 0 # cartographer needs this to be set to 0
#position_endstop: 5 # cartographer needs this to be commented out
# Z Stepper overrides for Cartographer
[stepper_z]
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32
step_pin = Z_STEP
dir_pin = !Z_DIR
enable_pin = !Z_ENABLE
endstop_pin: scanner:z_virtual_endstop # use cartographer as virtual endstop
homing_retract_dist: 0 # cartographer needs this to be set to 0
position_max: 280
step_pin: PF11
dir_pin: PG3
enable_pin: !PG5
position_endstop: 0 ####!!!!!!!! needs to be removed once i figure it out!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1
##  Z-position of nozzle (in mm) to z-endstop trigger point relative to print surface (Z0)
##  (+) value = endstop above Z0, (-) value = endstop below
##  Increasing position_endstop brings nozzle closer to the bed
##  After you run Z_ENDSTOP_CALIBRATE, position_endstop will be stored at the very end of your config
#position_min: -12
#homing_speed: 8
#second_homing_speed: 3
#homing_retract_dist: 3
#-------------------------------------------#
#           XY settings                     #
#-------------------------------------------#
[stepper_x]
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 400
step_pin = X_STEP
dir_pin = !X_DIR
enable_pin = !X_ENABLE
endstop_pin = tmc5160_stepper_x:virtual_endstop
homing_speed = 80
homing_retract_dist = 0
position_min = 0
position_max = 350
position_endstop = 350
[stepper_y]
rotation_distance = 40
microsteps = 32
full_steps_per_rotation = 400
step_pin = Y_STEP
dir_pin = !Y_DIR
enable_pin = !Y_ENABLE
endstop_pin = tmc5160_stepper_y:virtual_endstop
homing_speed = 80
homing_retract_dist = 0
position_min = 0
position_max = 350
position_endstop = 350
#-------------------------------------------#
#           Sensorless Homing               #
#-------------------------------------------#
[tmc5160 stepper_z]
cs_pin=Z_TMCUART
spi_software_sclk_pin = DRIVER_SPI_SCK
spi_software_mosi_pin = DRIVER_SPI_MOSI
spi_software_miso_pin = DRIVER_SPI_MISO
run_current: 1.2
hold_current: 0.6
sense_resistor: 0.075      # S5 resistor is 75mΩ

[tmc5160 stepper_z1]
cs_pin=Z1_TMCUART
spi_software_sclk_pin = DRIVER_SPI_SCK
spi_software_mosi_pin = DRIVER_SPI_MOSI
spi_software_miso_pin = DRIVER_SPI_MISO
run_current: 1.2
hold_current: 0.6
sense_resistor: 0.075      # S5 resistor is 75mΩ

[tmc5160 stepper_z2]
cs_pin=Z2_TMCUART
spi_software_sclk_pin = DRIVER_SPI_SCK
spi_software_mosi_pin = DRIVER_SPI_MOSI
spi_software_miso_pin = DRIVER_SPI_MISO
run_current: 1.2
hold_current: 0.6
sense_resistor: 0.075      # S5 resistor is 75mΩ

[tmc5160 stepper_z3]
cs_pin=Z3_TMCUART
spi_software_sclk_pin = DRIVER_SPI_SCK
spi_software_mosi_pin = DRIVER_SPI_MOSI
spi_software_miso_pin = DRIVER_SPI_MISO
run_current: 1.2
hold_current: 0.6
sense_resistor: 0.075      # S5 resistor is 75mΩ

[tmc5160 stepper_x]
cs_pin = X_TMCUART
spi_software_sclk_pin = DRIVER_SPI_SCK
spi_software_mosi_pin = DRIVER_SPI_MOSI
spi_software_miso_pin = DRIVER_SPI_MISO
interpolate = True
run_current = 1
sense_resistor = 0.022
stealthchop_threshold = 0
driver_sgt = -1
diag1_pin = ^!X_STOP
[tmc5160 stepper_y]
cs_pin = Y_TMCUART
spi_software_sclk_pin = DRIVER_SPI_SCK
spi_software_mosi_pin = DRIVER_SPI_MOSI
spi_software_miso_pin = DRIVER_SPI_MISO
interpolate = True
run_current = 1
sense_resistor = 0.022
stealthchop_threshold = 0
driver_sgt = -1
diag1_pin = ^!Y_STOP

#[tmc2209 extruder] in mcu.cfg under the ldo nighthawk pins

[scanner]
mcu: scanner            
#   Offsets are measured from the centre of your coil, to the tip of your nozzle 
#   on a level axis. It is vital that this is accurate. 
x_offset: 0                          
#    adjust for your cartographers offset from nozzle to middle of coil
y_offset: 15                         
#    adjust for your cartographers offset from nozzle to middle of coil
backlash_comp: 0.5
#   Backlash compensation distance for removing Z backlash before measuring
#   the sensor response.
sensor: cartographer
#    this must be set as cartographer unless using IDM etc.
sensor_alt: carto
#    alternate name to call commands. CARTO_TOUCH etc      
mesh_runs: 2
#    Number of passes to make during mesh scan.

#------------------------------------------#
#           Neopixel chamber lights         #
#------------------------------------------#
[neopixel caselight]
pin: PB6
chain_count:36

#[bed_mesh]
#zero_reference_position: 150, 150    
#    set this to the middle of your bed
#speed: 200
#    movement speed of toolhead during bed mesh
#horizontal_move_z: 5
#    height of scanner during bed mesh scan
#mesh_min: 35, 6
#    start point of bed mesh [X, Y]
#mesh_max: 240, 198
#    end point of bed mesh [X, Y]
#probe_count: 30, 30
#algorithm: bicubic
[bed_mesh]
speed: 120
horizontal_move_z: 5
mesh_min: 35, 30
mesh_max: 270,270
probe_count: 11, 11
fade_start: 1.0
fade_end: 10.0
algorithm: bicubic
zero_reference_position: 150, 150 # center of your bed for cartographer scanner

[temperature_sensor Cartographer_MCU]
sensor_type: temperature_mcu
sensor_mcu: scanner
min_temp: 0
max_temp: 105

#[safe_z_home]
#home_xy_position: 150,150 
# Example home_xy_position: 175,175 - This would be for a 350 * 350mm bed. 
#z_hop: 10


#[temperature_sensor Chamber]
#sensor_type: Trianglelab-NTC100K-B3950
#sensor_pin: toolhead:CHAMBER_TEMPERATURE
#min_temp: 0
#max_temp: 105

#-----------------------#
#   Macros              #
#-----------------------#
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:
    {% set TARGET_TEMP = printer.heater_bed.target %}
    M140 S0
    _BED_MESH_CALIBRATE {rawparams}
    M140 S{TARGET_TEMP}
